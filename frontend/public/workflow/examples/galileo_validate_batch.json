{
  "workflow_id": "wf-galileo-validate-batch",
  "version": "1.0.0",
  "ssot_id": "a1b2c3d4e5f6",
  "metadata": {
    "name": "Galileo Hypothesis Validation Batch",
    "description": "Validate multiple hypotheses using Galileo framework",
    "author": "Claude-Opus-4.1",
    "created": "2025-01-11T10:00:00Z",
    "tags": ["galileo", "validation", "batch", "computation"],
    "estimated_duration_seconds": 120,
    "risk_level": "low"
  },
  "nodes": [
    {
      "id": "node-load-hypotheses",
      "type": "read_file",
      "label": "Load Hypotheses",
      "position": {"x": 100, "y": 200},
      "params": {
        "path": "hypotheses.json"
      }
    },
    {
      "id": "node-load-rubrics",
      "type": "read_file",
      "label": "Load Rubrics",
      "position": {"x": 100, "y": 350},
      "params": {
        "path": "galileo/feasibility_risk_rubrics.json"
      }
    },
    {
      "id": "node-parallel-validation",
      "type": "Parallel",
      "label": "Validate All",
      "position": {"x": 300, "y": 275},
      "params": {
        "node_ids": ["node-validate-1", "node-validate-2", "node-validate-3"],
        "wait_all": true
      }
    },
    {
      "id": "node-validate-1",
      "type": "execute_code",
      "label": "Validate H1-H3",
      "position": {"x": 500, "y": 150},
      "params": {
        "language": "python",
        "code": "# Validate hypotheses 1-3\nimport json\nhypotheses = json.loads(input_data['hypotheses'])\nrubrics = json.loads(input_data['rubrics'])\nresults = validate_batch(hypotheses[0:3], rubrics)\nprint(json.dumps(results))",
        "timeout": 30
      }
    },
    {
      "id": "node-validate-2",
      "type": "execute_code",
      "label": "Validate H4-H6",
      "position": {"x": 500, "y": 275},
      "params": {
        "language": "python",
        "code": "# Validate hypotheses 4-6\nimport json\nhypotheses = json.loads(input_data['hypotheses'])\nrubrics = json.loads(input_data['rubrics'])\nresults = validate_batch(hypotheses[3:6], rubrics)\nprint(json.dumps(results))",
        "timeout": 30
      }
    },
    {
      "id": "node-validate-3",
      "type": "execute_code",
      "label": "Validate H7-H10",
      "position": {"x": 500, "y": 400},
      "params": {
        "language": "python",
        "code": "# Validate hypotheses 7-10\nimport json\nhypotheses = json.loads(input_data['hypotheses'])\nrubrics = json.loads(input_data['rubrics'])\nresults = validate_batch(hypotheses[6:10], rubrics)\nprint(json.dumps(results))",
        "timeout": 30
      }
    },
    {
      "id": "node-combine-results",
      "type": "execute_code",
      "label": "Combine Results",
      "position": {"x": 700, "y": 275},
      "params": {
        "language": "python",
        "code": "# Combine all validation results\nimport json\nall_results = []\nfor result in input_data['validation_results']:\n    all_results.extend(json.loads(result))\n\n# Rank by composite score\nranked = sorted(all_results, key=lambda x: x['composite_score'], reverse=True)\nprint(json.dumps({'rankings': ranked, 'total_validated': len(ranked)}))",
        "timeout": 10
      }
    },
    {
      "id": "node-generate-report",
      "type": "execute_code",
      "label": "Generate Report",
      "position": {"x": 900, "y": 275},
      "params": {
        "language": "python",
        "code": "# Generate validation report\nimport json\nfrom datetime import datetime\n\nrankings = json.loads(input_data['rankings'])\nreport = {\n    'timestamp': datetime.now().isoformat(),\n    'validated_count': rankings['total_validated'],\n    'top_3': rankings['rankings'][:3],\n    'feasible_count': sum(1 for h in rankings['rankings'] if h['composite_score'] >= 5.0),\n    'recommendations': []\n}\n\nfor h in rankings['rankings'][:3]:\n    if h['composite_score'] >= 7.0:\n        report['recommendations'].append({'id': h['id'], 'action': 'proceed'})\n    elif h['composite_score'] >= 5.0:\n        report['recommendations'].append({'id': h['id'], 'action': 'refine'})\n    else:\n        report['recommendations'].append({'id': h['id'], 'action': 'reject'})\n\nprint(json.dumps(report, indent=2))",
        "timeout": 10
      }
    },
    {
      "id": "node-approval-gate",
      "type": "ApprovalGate",
      "label": "Review Report",
      "position": {"x": 1100, "y": 275},
      "params": {
        "message": "Review validation report before saving",
        "timeout_seconds": 300
      }
    },
    {
      "id": "node-save-report",
      "type": "write_file",
      "label": "Save Report",
      "position": {"x": 1300, "y": 275},
      "params": {
        "path": "galileo/validation_report_{{timestamp}}.json",
        "content": "{{node-generate-report.output}}"
      },
      "approval": {
        "required": true,
        "message": "Save validation report to file?"
      }
    }
  ],
  "edges": [
    {"id": "e1", "source": "node-load-hypotheses", "target": "node-parallel-validation"},
    {"id": "e2", "source": "node-load-rubrics", "target": "node-parallel-validation"},
    {"id": "e3", "source": "node-parallel-validation", "target": "node-validate-1"},
    {"id": "e4", "source": "node-parallel-validation", "target": "node-validate-2"},
    {"id": "e5", "source": "node-parallel-validation", "target": "node-validate-3"},
    {"id": "e6", "source": "node-validate-1", "target": "node-combine-results"},
    {"id": "e7", "source": "node-validate-2", "target": "node-combine-results"},
    {"id": "e8", "source": "node-validate-3", "target": "node-combine-results"},
    {"id": "e9", "source": "node-combine-results", "target": "node-generate-report"},
    {"id": "e10", "source": "node-generate-report", "target": "node-approval-gate"},
    {"id": "e11", "source": "node-approval-gate", "target": "node-save-report", "type": "success"}
  ],
  "variables": {
    "timestamp": "{{Date.now()}}",
    "validation_threshold": 5.0
  },
  "execution": {
    "mode": "dag",
    "max_parallel": 3,
    "global_timeout": 300,
    "dry_run": true,
    "checkpoint_after": ["node-combine-results"]
  },
  "approvals": {
    "default_policy": "deny_writes",
    "write_nodes_require_approval": true
  },
  "outputs": {
    "success": {
      "report_path": "{{node-save-report.output}}",
      "top_hypothesis": "{{node-combine-results.output.rankings[0]}}",
      "feasible_count": "{{node-generate-report.output.feasible_count}}"
    },
    "error": {
      "failed_node": "{{error.node_id}}",
      "error_message": "error.message"
    }
  }
}