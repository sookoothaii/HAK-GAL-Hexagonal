// V2 - Cleaned Routes
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { ThemeProvider } from '@/components/theme-provider';
import { useGovernorSocket } from '@/hooks/useGovernorSocket';
import { useIntelligenceSocket } from '@/hooks/useIntelligenceSocket';
import { AnimatePresence, motion } from 'framer-motion';
import { Toaster } from "sonner";

// Components
import ProNavigation from '@/components/ProNavigation';
import ProHeader from '@/components/ProHeader';
import { EnterpriseErrorBoundary } from '@/components/EnterpriseErrorBoundary';
import LoadingScreen from '@/components/LoadingScreen';

// HRM Integration
import { useHRMSocket } from '@/hooks/useHRMSocket';
import HRMQueryInterface from '@/components/interaction/HRMQueryInterface';

// Pages (Cleaned List)
import ProDashboard from '@/pages/ProDashboard';
import ProUnifiedQuery from '@/pages/ProUnifiedQuery';  // Primary Query Interface
import ProSystemMonitoring from '@/pages/ProSystemMonitoring';
import ProEngineControl from '@/pages/ProEngineControl';
import ProSettingsEnhanced from '@/pages/ProSettingsEnhanced';
import ProKnowledgeGraph from '@/components/interaction/ProKnowledgeGraph';
import ProKnowledgeStats from '@/pages/ProKnowledgeStats';
import HRMDashboard from '@/pages/HRMDashboard';  // HRM Neural Reasoning Dashboard
import TrustCenter from '@/pages/TrustCenter';  // Trust & Verification Center

// Layout Component (Restored)
const AppLayout: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  return (
    <div className="h-screen w-screen bg-background text-foreground flex overflow-hidden">
      <ProNavigation />
      <div className="flex-1 flex flex-col overflow-hidden">
        <ProHeader />
        <main className="flex-1 overflow-hidden bg-gradient-to-br from-background via-background to-muted/5">
          <AnimatePresence mode="wait">
            <motion.div
              key={window.location.pathname}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
              className="h-full"
            >
              {children}
            </motion.div>
          </AnimatePresence>
        </main>
      </div>
    </div>
  );
};

// App Content with Routes
function AppContent() {
  const [isLoading, setIsLoading] = useState(true);
  
  useGovernorSocket();
  useHRMSocket(); // HRM Integration
  useIntelligenceSocket(); // Unified Intelligence Socket
  
  useEffect(() => {
    const timer = setTimeout(() => setIsLoading(false), 1500);
    return () => clearTimeout(timer);
  }, []);
  
  if (isLoading) {
    return <LoadingScreen />;
  }
  
  return (
    <AppLayout>
      <Routes>
        {/* Redirect root to the main professional dashboard */}
        <Route path="/" element={<Navigate to="/dashboard" replace />} />
        
        {/* Main Dashboard Route */}
        <Route path="/dashboard" element={<ProDashboard />} />
        
        {/* Unified Query Interface - NEW Primary Query System */}
        <Route path="/query" element={<ProUnifiedQuery />} />
        <Route path="/knowledge" element={<Navigate to="/knowledge/stats" replace />} />
        <Route path="/knowledge/graph" element={<ProKnowledgeGraph />} />
        <Route path="/knowledge/stats" element={<ProKnowledgeStats />} />
        <Route path="/engines" element={<ProEngineControl />} />
        <Route path="/monitoring" element={<ProSystemMonitoring />} />
        <Route path="/settings" element={<ProSettingsEnhanced />} />
        
        {/* HRM Neural Reasoning Routes */}
        <Route path="/hrm" element={<HRMDashboard />} />  {/* Direct to HRM Dashboard */}
        <Route path="/hrm/query" element={<HRMQueryInterface />} />
        
        {/* Trust & Verification Center */}
        <Route path="/trust" element={<TrustCenter />} />
        
        {/* Enterprise route redirects to monitoring */}
        <Route path="/enterprise" element={<Navigate to="/monitoring" replace />} />

        {/* 404 Page */}
        <Route path="*" element={
          <div className="h-full flex items-center justify-center">
            <div className="text-center">
              <h1 className="text-6xl font-bold text-primary mb-4">404</h1>
              <p className="text-xl text-muted-foreground mb-8">Page not found</p>
              <a href="/" className="text-primary hover:underline">Go back home</a>
            </div>
          </div>
        } />
      </Routes>
    </AppLayout>
  );
}


// Main App Component
function App() {
  return (
    <EnterpriseErrorBoundary name="App">
      <ThemeProvider defaultTheme="dark" storageKey="hak-gal-theme">
        <Router>
          <AppContent />
        </Router>
        <Toaster position="bottom-right" richColors />
      </ThemeProvider>
    </EnterpriseErrorBoundary>
  );
}

export default App;
