// WebSocket Service for real-time updates
import io, { Socket } from 'socket.io-client';
import { useGovernorStore, RewardDataPoint, KbMetrics, PendingThesis } from '@/stores/useGovernorStore';
import { convertToCamelCase } from '@/lib/utils';

const SOCKET_URL = 'http://localhost:5000';

class WebSocketService {
  private socket: Socket | null = null;
  private listeners: Map<string, Function[]> = new Map();

  connect() {
    if (this.socket?.connected) return;

    this.socket = io(SOCKET_URL, {
      reconnectionAttempts: 5,
      reconnectionDelay: 3000,
      transports: ['websocket'],
    });

    this.setupEventHandlers();
  }

  private setupEventHandlers() {
    if (!this.socket) return;

    this.socket.on('connect', () => {
      console.log('✅ WebSocket connected to HAK-GAL Backend');
      this.emit('connected', true);
      // Request initial data
      this.socket?.emit('request_initial_data');
    });

    this.socket.on('disconnect', () => {
      console.log('❌ WebSocket disconnected');
      this.emit('connected', false);
    });
    
    // --- Centralized Event Handling with CamelCase Conversion ---
    const events = [
      'governor_update',
      'system_update',
      'kb_update',
      'llm_status',
      'engine_status',
      'auto_learning_update',
      'query_result',
      'initial_data', // Added initial_data event
      'system_load_update', // Added system_load_update
      'engine_status_update', // Added engine_status_update
      'visualization_update', // Added visualization_update
      'command_response' // Added command_response
    ];

    events.forEach(event => {
      this.socket?.on(event, (data: any) => {
        this.emit(event, data);
      });
    });

    // Error handling remains separate
    this.socket.on('error', (error: any) => {
      console.error('WebSocket error:', error);
      this.emit('error', error);
    });
  }

  disconnect() {
    this.socket?.disconnect();
    this.socket = null;
    this.listeners.clear();
  }

  // Event emitter pattern
  on(event: string, callback: Function) {
    if (!this.listeners.has(event)) {
      this.listeners.set(event, []);
    }
    this.listeners.get(event)?.push(callback);
  }

  off(event: string, callback: Function) {
    const callbacks = this.listeners.get(event);
    if (callbacks) {
      const index = callbacks.indexOf(callback);
      if (index > -1) {
        callbacks.splice(index, 1);
      }
    }
  }

  private emit(event: string, data: any) {
    const callbacks = this.listeners.get(event);
    if (callbacks) {
      // Convert all outgoing data to camelCase, except for the simple 'connected' event
      const processedData = event !== 'connected' ? convertToCamelCase(data) : data;
      callbacks.forEach(callback => callback(processedData));
    }
  }

  // Send commands to backend
  sendCommand(command: string, params?: any) {
    if (this.socket?.connected) {
      this.socket.emit('command', { command, params });
    } else {
      console.error('WebSocket not connected');
    }
  }

  // Send query
  sendQuery(query: string) {
    if (this.socket?.connected) {
      this.socket.emit('query', { query });
    } else {
      console.error('WebSocket not connected');
    }
  }

  // Governor control
  toggleGovernor(enabled: boolean) {
    if (this.socket?.connected) {
      this.socket.emit('governor_control', { action: enabled ? 'start' : 'stop' });
    }
  }

  // Auto learning control
  toggleAutoLearning(enabled: boolean) {
    if (this.socket?.connected) {
      this.socket.emit('auto_learning_control', { enabled });
    }
  }

  // Set learning parameters
  setLearningParameters(params: any) {
    if (this.socket?.connected) {
      this.socket.emit('set_learning_parameters', params);
    }
  }

  // Thesis feedback
  sendThesisFeedback(thesisId: string, action: 'approve' | 'reject') {
    if (this.socket?.connected) {
      this.socket.emit('thesis_feedback', { thesis_id: thesisId, action });
    }
  }
}

// Singleton instance
const wsService = new WebSocketService();

export default wsService;
