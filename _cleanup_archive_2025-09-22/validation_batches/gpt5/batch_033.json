{
  "provider": "gpt5",
  "instructions": "Generische Qualitätsprüfung; strikte JSON-Ausgabe",
  "schema": {
    "items_schema": {
      "statement": "string",
      "verdict": "correct|incorrect|uncertain",
      "reasons": "string",
      "suggested_fix": "string|null",
      "domain": "string",
      "confidence": "number"
    },
    "summary_schema": {
      "count": "number",
      "correct": "number",
      "incorrect": "number",
      "uncertain": "number",
      "acceptance_rate": "number"
    }
  },
  "samples": [
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(prime, integral, derivative, graph, calculus)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(prime, limit, integer, topology)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(prime, topology, Euler, limit, integer)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, Euler, limit, derivative)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, Gauss, algebra, derivative)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, Gauss, derivative, calculus, prime)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, algebra, calculus, Euler)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, algebra, integral, calculus, graph)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, algebra, prime)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, calculus, Euler, integral, Gauss)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, calculus, graph, Gauss, Euler)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, calculus, integer, derivative, graph)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, calculus, limit)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, calculus, prime)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, graph, Gauss, calculus, derivative)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, graph, calculus, integral)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, integer, Euler, integral)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, integer, graph)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, integral, prime)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, limit, integer)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, prime, algebra, derivative)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, prime, algebra, derivative, graph)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, prime, algebra, integral)."
    },
    {
      "predicate": "Anesthesia",
      "statement": "Anesthesia(General, local, regional, sedation, monitoring)."
    },
    {
      "predicate": "Antibody",
      "statement": "Antibody(Immunoglobulin, B-cell, plasma, memory, affinity)."
    },
    {
      "predicate": "Antigen",
      "statement": "Antigen(Epitope, binding, site, recognition, specificity)."
    },
    {
      "predicate": "Application",
      "statement": "Application(Agriculture, Biotechnology)."
    },
    {
      "predicate": "Application",
      "statement": "Application(ArtificialIntelligence, Healthcare)."
    },
    {
      "predicate": "Application",
      "statement": "Application(Blockchain, Cryptocurrency)."
    },
    {
      "predicate": "Application",
      "statement": "Application(Entity1, Application)."
    },
    {
      "predicate": "Application",
      "statement": "Application(Gaming, Entertainment)."
    },
    {
      "predicate": "Application",
      "statement": "Application(Medicine, Biotechnology)."
    },
    {
      "predicate": "Application",
      "statement": "Application(Nanotechnology, Medicine)."
    },
    {
      "predicate": "Application",
      "statement": "Application(Nanotechnology, WaterPurification)."
    },
    {
      "predicate": "Application",
      "statement": "Application(QuantumComputing, Cryptography)."
    },
    {
      "predicate": "Application",
      "statement": "Application(VR, Education)."
    },
    {
      "predicate": "Application",
      "statement": "Application(VR, Gaming)."
    },
    {
      "predicate": "Application",
      "statement": "Application(VR, Healthcare)."
    },
    {
      "predicate": "Application",
      "statement": "Application(VR, Industrial)."
    },
    {
      "predicate": "Argument",
      "statement": "Argument(Premise, conclusion, validity, soundness)."
    }
  ]
}