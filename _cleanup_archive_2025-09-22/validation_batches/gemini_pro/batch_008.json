{
  "provider": "gemini_pro",
  "instructions": "Fokus Bio/Physik; strikte JSON-Ausgabe; max 40 Items",
  "schema": {
    "items_schema": {
      "statement": "string",
      "verdict": "correct|incorrect|uncertain",
      "reasons": "string",
      "suggested_fix": "string|null",
      "domain": "string",
      "confidence": "number"
    },
    "summary_schema": {
      "count": "number",
      "correct": "number",
      "incorrect": "number",
      "uncertain": "number",
      "acceptance_rate": "number"
    }
  },
  "samples": [
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(function, Euler, algebra)."
    },
    {
      "predicate": "Set",
      "statement": "Set(graph, integral, limit)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(BigBang, FormedLightestElements)."
    },
    {
      "predicate": "WasDevelopedBy",
      "statement": "WasDevelopedBy(electron, Turing)."
    },
    {
      "predicate": "HasProperty",
      "statement": "HasProperty(Pacific, Deep)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(protein, mitochondria)."
    },
    {
      "predicate": "Wave",
      "statement": "Wave(electron, boson, photon)."
    },
    {
      "predicate": "Cell",
      "statement": "Cell(fungi, chromosome, bacteria)."
    },
    {
      "predicate": "DependsOn",
      "statement": "DependsOn(RNA, tissue)."
    },
    {
      "predicate": "HasPurpose",
      "statement": "HasPurpose(algebra, conversion)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(cloud, TCP/IP, client)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(Einstein, electron)."
    },
    {
      "predicate": "Quantum",
      "statement": "Quantum(momentum, photon, proton, gravity)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(graph, vector, theorem)."
    },
    {
      "predicate": "IsSimilarTo",
      "statement": "IsSimilarTo(SeveralPlates, SmallPlates)."
    },
    {
      "predicate": "Causes",
      "statement": "Causes(ContinentalCollisions, MountainFormation)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(SQL, cloud)."
    },
    {
      "predicate": "IsTypeOf",
      "statement": "IsTypeOf(NH3, reaction)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(function, integral, vector)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(AI, cloud, client)."
    },
    {
      "predicate": "API",
      "statement": "API(server, HTTP, GraphQL, SQL, cloud)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(ecosystem, species, organ)."
    },
    {
      "predicate": "Uses",
      "statement": "Uses(network, cloud)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(nucleus, fungi)."
    },
    {
      "predicate": "DNA",
      "statement": "DNA(mitochondria, ribosome, chromosome)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(integer, algebra, integral)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(sodium, CH4)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(oxygen, ion, O2)."
    },
    {
      "predicate": "Database",
      "statement": "Database(NoSQL, REST, server, GraphQL, cloud)."
    },
    {
      "predicate": "Requires",
      "statement": "Requires(atom, CO2)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(Gauss, integer)."
    },
    {
      "predicate": "Uses",
      "statement": "Uses(set, calculus)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(calculus, algebra, integral)."
    },
    {
      "predicate": "IsTypeOf",
      "statement": "IsTypeOf(CH4, chlorine)."
    },
    {
      "predicate": "IsTypeOf",
      "statement": "IsTypeOf(GraphQL, protocol)."
    },
    {
      "predicate": "Solution",
      "statement": "Solution(O2, chlorine, sodium, CO2, oxygen)."
    },
    {
      "predicate": "HasPurpose",
      "statement": "HasPurpose(API, storage)."
    },
    {
      "predicate": "HasPurpose",
      "statement": "HasPurpose(electron, regulation)."
    },
    {
      "predicate": "IsA",
      "statement": "IsA(Entity976, Algorithm)."
    },
    {
      "predicate": "Function",
      "statement": "Function(graph, derivative, topology, integer)."
    }
  ]
}