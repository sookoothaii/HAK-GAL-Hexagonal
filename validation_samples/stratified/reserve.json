{
  "table": "facts",
  "samples": [
    {
      "predicate": "HasProperty",
      "statement": "HasProperty(prime, stable)."
    },
    {
      "predicate": "HasProperty",
      "statement": "HasProperty(set, stable)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(gravity, mass, Newton)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(hydrogen, bond)."
    },
    {
      "predicate": "Force",
      "statement": "Force(neutron, gravity, Newton)."
    },
    {
      "predicate": "Compound",
      "statement": "Compound(O2, CH4, H2O, NH3, nitrogen)."
    },
    {
      "predicate": "HasPurpose",
      "statement": "HasPurpose(MultiplierEffect, MagnifiedImpactOnIncome)."
    },
    {
      "predicate": "IsSimilarTo",
      "statement": "IsSimilarTo(gravity, electron)."
    },
    {
      "predicate": "Evolution",
      "statement": "Evolution(plant, animal, enzyme, virus, bacteria)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(calculus, algebra, vector)."
    },
    {
      "predicate": "Causes",
      "statement": "Causes(StainedGlass, InteriorLightFlooding)."
    },
    {
      "predicate": "Requires",
      "statement": "Requires(DNA, protein)."
    },
    {
      "predicate": "Motion",
      "statement": "Motion(Einstein, mass, boson, velocity)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(momentum, Einstein, electron)."
    },
    {
      "predicate": "Function",
      "statement": "Function(limit, calculus, algebra, integral, graph)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(integer, derivative)."
    },
    {
      "predicate": "IsTypeOf",
      "statement": "IsTypeOf(force, Einstein)."
    },
    {
      "predicate": "Protein",
      "statement": "Protein(chromosome, plant, RNA, ribosome, mitochondria)."
    },
    {
      "predicate": "IsTypeOf",
      "statement": "IsTypeOf(client, SQL)."
    },
    {
      "predicate": "Database",
      "statement": "Database(NoSQL, REST, server, GraphQL, cloud)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(topology, graph, Gauss, calculus, derivative)."
    },
    {
      "predicate": "HasLocation",
      "statement": "HasLocation(protein, region)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(boson, quark)."
    },
    {
      "predicate": "Requires",
      "statement": "Requires(algebra, function)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(molecule, NaCl)."
    },
    {
      "predicate": "Protein",
      "statement": "Protein(bacteria, animal, RNA, plant, ribosome)."
    },
    {
      "predicate": "Quantum",
      "statement": "Quantum(Einstein, photon, gravity, electron)."
    },
    {
      "predicate": "Field",
      "statement": "Field(boson, velocity, photon, proton)."
    },
    {
      "predicate": "Requires",
      "statement": "Requires(organism, fungi)."
    },
    {
      "predicate": "Function",
      "statement": "Function(integral, prime, Euler, limit)."
    },
    {
      "predicate": "Requires",
      "statement": "Requires(reaction, atom)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(hydrogen, reaction)."
    },
    {
      "predicate": "IsA",
      "statement": "IsA(momentum, principle)."
    },
    {
      "predicate": "StudiedBy",
      "statement": "StudiedBy(set, Curie)."
    },
    {
      "predicate": "Causes",
      "statement": "Causes(velocity, quantum)."
    },
    {
      "predicate": "IsTypeOf",
      "statement": "IsTypeOf(graph, integer)."
    },
    {
      "predicate": "WasDevelopedBy",
      "statement": "WasDevelopedBy(set, Einstein)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(CategoricalImperative, HumanityAsEnd)."
    },
    {
      "predicate": "Uses",
      "statement": "Uses(CO2, carbon)."
    },
    {
      "predicate": "HasProperty",
      "statement": "HasProperty(Einstein, static)."
    },
    {
      "predicate": "Network",
      "statement": "Network(NoSQL, blockchain, SQL, GraphQL)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(FiscalPolicy, TaxCuts)."
    },
    {
      "predicate": "HasProperty",
      "statement": "HasProperty(GothicCathedrals, LuminousInteriors)."
    },
    {
      "predicate": "HasLocation",
      "statement": "HasLocation(API, region)."
    },
    {
      "predicate": "IsA",
      "statement": "IsA(Nanotechnology, Concept)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(calculus, integer)."
    },
    {
      "predicate": "Reaction",
      "statement": "Reaction(H2O, NH3, chlorine)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(limit, topology, Euler)."
    },
    {
      "predicate": "Gene",
      "statement": "Gene(chromosome, RNA, ribosome, virus, animal)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(derivative, algebra, set)."
    },
    {
      "predicate": "Uses",
      "statement": "Uses(bacteria, DNA)."
    },
    {
      "predicate": "Interface",
      "statement": "Interface(cloud, NoSQL, SQL, HTTP)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(enzyme, species)."
    },
    {
      "predicate": "IsA",
      "statement": "IsA(VirtualRealityvr, ComputergeneratedSimulationOf)."
    },
    {
      "predicate": "HasProperty",
      "statement": "HasProperty(AncientEgypt, AdvancedInAstronomy)."
    },
    {
      "predicate": "Network",
      "statement": "Network(blockchain, TCP/IP, GraphQL, SQL)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(organ, RNA, ecosystem)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(calculus, graph)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(H2O, bond, CO2)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(Euler, prime, theorem)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(integer, graph, prime, integral, limit)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(nucleus, protein, enzyme)."
    },
    {
      "predicate": "Force",
      "statement": "Force(boson, Newton, neutron, velocity, gravity)."
    },
    {
      "predicate": "DependsOn",
      "statement": "DependsOn(energy, boson)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(mass, boson, neutron)."
    },
    {
      "predicate": "HasLocation",
      "statement": "HasLocation(mitochondria, cell)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(NoSQL, security, blockchain)."
    },
    {
      "predicate": "Requires",
      "statement": "Requires(ecosystem, bacteria)."
    },
    {
      "predicate": "HasLocation",
      "statement": "HasLocation(SouthernRoute, Mediterranean)."
    },
    {
      "predicate": "Matrix",
      "statement": "Matrix(Gauss, derivative, integral, topology)."
    },
    {
      "predicate": "Database",
      "statement": "Database(NoSQL, TCP/IP, SQL, AI, client)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(theorem, function, matrix)."
    },
    {
      "predicate": "IsTypeOf",
      "statement": "IsTypeOf(PacificPlate, MajorPlates)."
    },
    {
      "predicate": "Field",
      "statement": "Field(boson, proton, electron, momentum, neutron)."
    },
    {
      "predicate": "IsTypeOf",
      "statement": "IsTypeOf(CH4, O2)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(organ, enzyme)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(nitrogen, bond)."
    },
    {
      "predicate": "StudiedBy",
      "statement": "StudiedBy(velocity, Bohr)."
    },
    {
      "predicate": "HasPurpose",
      "statement": "HasPurpose(photon, conversion)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(database, encryption)."
    },
    {
      "predicate": "Causes",
      "statement": "Causes(velocity, particle)."
    },
    {
      "predicate": "Uses",
      "statement": "Uses(tissue, DNA)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(ecosystem, protein)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(proof, equation)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(derivative, limit, integer, integral)."
    },
    {
      "predicate": "Requires",
      "statement": "Requires(integral, matrix)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(SQL, framework, NoSQL)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(hydrogen, chlorine, NaCl)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(nucleus, organism, RNA)."
    },
    {
      "predicate": "Protein",
      "statement": "Protein(plant, fungi, bacteria, virus)."
    },
    {
      "predicate": "HasLocation",
      "statement": "HasLocation(network, system)."
    },
    {
      "predicate": "HasProperty",
      "statement": "HasProperty(oxygen, stable)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(ecosystem, ribosome, fungi)."
    },
    {
      "predicate": "DependsOn",
      "statement": "DependsOn(tissue, chromosome)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(integral, equation, limit)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(integral, set)."
    },
    {
      "predicate": "Interface",
      "statement": "Interface(encryption, AI, client, GraphQL, REST)."
    },
    {
      "predicate": "Function",
      "statement": "Function(graph, algebra, topology, prime, calculus)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(proof, limit, set)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(virus, enzyme, species)."
    },
    {
      "predicate": "HasProperty",
      "statement": "HasProperty(Napoleon, Emperor)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(integer, equation)."
    },
    {
      "predicate": "HasLocation",
      "statement": "HasLocation(SilkRoad, RomanEmpire)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(H2O, NH3, NaCl)."
    },
    {
      "predicate": "IsSimilarTo",
      "statement": "IsSimilarTo(HTTP, client)."
    },
    {
      "predicate": "Quantum",
      "statement": "Quantum(velocity, mass, gravity, photon, boson)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(catalyst, molecule)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(chromosome, organism, protein)."
    },
    {
      "predicate": "IsTypeOf",
      "statement": "IsTypeOf(Newton, gravity)."
    },
    {
      "predicate": "DependsOn",
      "statement": "DependsOn(derivative, function)."
    },
    {
      "predicate": "StudiedBy",
      "statement": "StudiedBy(carbon, Turing)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(algebra, Gauss, derivative)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(atom, sodium)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(network, SQL, TCP/IP)."
    },
    {
      "predicate": "Evolution",
      "statement": "Evolution(RNA, enzyme, animal, bacteria, fungi)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(Newton, particle, quark)."
    },
    {
      "predicate": "System",
      "statement": "System(GraphQL, HTTP, cloud, TCP/IP)."
    },
    {
      "predicate": "HasPurpose",
      "statement": "HasPurpose(species, analysis)."
    },
    {
      "predicate": "Requires",
      "statement": "Requires(Einstein, field)."
    },
    {
      "predicate": "Causes",
      "statement": "Causes(nitrogen, O2)."
    },
    {
      "predicate": "GeneratedAt",
      "statement": "GeneratedAt(Capitalism, Hexagonal)."
    },
    {
      "predicate": "HasPurpose",
      "statement": "HasPurpose(quantum, regulation)."
    },
    {
      "predicate": "Causes",
      "statement": "Causes(calculus, axiom)."
    },
    {
      "predicate": "System",
      "statement": "System(cloud, GraphQL, NoSQL, blockchain)."
    },
    {
      "predicate": "API",
      "statement": "API(blockchain, cloud, TCP/IP, server, encryption)."
    },
    {
      "predicate": "IsSimilarTo",
      "statement": "IsSimilarTo(encryption, blockchain)."
    },
    {
      "predicate": "IsSimilarTo",
      "statement": "IsSimilarTo(derivative, limit)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(gravity, momentum, mass)."
    },
    {
      "predicate": "Quantum",
      "statement": "Quantum(gravity, velocity, neutron, photon, proton)."
    },
    {
      "predicate": "DependsOn",
      "statement": "DependsOn(reaction, NH3)."
    },
    {
      "predicate": "IsSimilarTo",
      "statement": "IsSimilarTo(proof, Euler)."
    },
    {
      "predicate": "Motion",
      "statement": "Motion(neutron, mass, Newton)."
    },
    {
      "predicate": "Protein",
      "statement": "Protein(enzyme, RNA, chromosome, ribosome)."
    },
    {
      "predicate": "HasLocation",
      "statement": "HasLocation(API, layer)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(theorem, matrix, graph)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(GraphQL, cloud)."
    },
    {
      "predicate": "Requires",
      "statement": "Requires(database, GraphQL)."
    },
    {
      "predicate": "Requires",
      "statement": "Requires(set, equation)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(set, function, integral)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(hydrogen, molecule, CH4)."
    },
    {
      "predicate": "Uses",
      "statement": "Uses(hydrogen, chlorine)."
    },
    {
      "predicate": "IsSimilarTo",
      "statement": "IsSimilarTo(mass, neutron)."
    },
    {
      "predicate": "Function",
      "statement": "Function(derivative, algebra, prime, topology)."
    },
    {
      "predicate": "Bond",
      "statement": "Bond(chlorine, nitrogen, O2, CH4)."
    },
    {
      "predicate": "HasLocation",
      "statement": "HasLocation(tissue, cell)."
    },
    {
      "predicate": "Requires",
      "statement": "Requires(calculus, equation)."
    },
    {
      "predicate": "Requires",
      "statement": "Requires(bacteria, enzyme)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(TCP/IP, GraphQL, API)."
    },
    {
      "predicate": "HasLocation",
      "statement": "HasLocation(carbon, system)."
    },
    {
      "predicate": "Gene",
      "statement": "Gene(plant, nucleus, virus, fungi, ribosome)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(framework, API, algorithm)."
    },
    {
      "predicate": "Causes",
      "statement": "Causes(Newton, quark)."
    },
    {
      "predicate": "Set",
      "statement": "Set(algebra, limit, graph, calculus, integer)."
    },
    {
      "predicate": "Requires",
      "statement": "Requires(neutron, field)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(KeyChallenges, EthicalConcerns)."
    },
    {
      "predicate": "HasPurpose",
      "statement": "HasPurpose(framework, regulation)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(mitochondria, enzyme, nucleus)."
    },
    {
      "predicate": "Protein",
      "statement": "Protein(fungi, RNA, chromosome, animal)."
    },
    {
      "predicate": "Equation",
      "statement": "Equation(calculus, topology, limit, prime, integer)."
    },
    {
      "predicate": "WasDevelopedBy",
      "statement": "WasDevelopedBy(SilkRoad, HanDynasty)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(ion, catalyst, CO2)."
    },
    {
      "predicate": "UsedIn",
      "statement": "UsedIn(RenewableEnergy, ReducedGreenhouseGasEmissions)."
    },
    {
      "predicate": "IsA",
      "statement": "IsA(equation, concept)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(security, SQL)."
    },
    {
      "predicate": "Field",
      "statement": "Field(quark, neutron, boson, mass, Einstein)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(electron, field, quark)."
    },
    {
      "predicate": "Equation",
      "statement": "Equation(integer, prime, Euler)."
    },
    {
      "predicate": "Causes",
      "statement": "Causes(particle, electron)."
    },
    {
      "predicate": "Uses",
      "statement": "Uses(catalyst, hydrogen)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(mass, wave)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(proof, axiom, equation)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(GothicCathedrals, SkilledArtisans)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(proof, function, axiom)."
    },
    {
      "predicate": "Energy",
      "statement": "Energy(Newton, velocity, momentum, mass)."
    },
    {
      "predicate": "DependsOn",
      "statement": "DependsOn(server, GraphQL)."
    },
    {
      "predicate": "Algorithm",
      "statement": "Algorithm(Euler, prime, topology)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(Gauss, integer, limit)."
    },
    {
      "predicate": "Cell",
      "statement": "Cell(fungi, animal, RNA, enzyme, bacteria)."
    },
    {
      "predicate": "Requires",
      "statement": "Requires(chromosome, RNA)."
    },
    {
      "predicate": "Requires",
      "statement": "Requires(ALU, CPU)."
    },
    {
      "predicate": "Theorem",
      "statement": "Theorem(derivative, algebra, prime, integral, integer)."
    },
    {
      "predicate": "Requires",
      "statement": "Requires(CH4, molecule)."
    },
    {
      "predicate": "HasPurpose",
      "statement": "HasPurpose(DNA, analysis)."
    },
    {
      "predicate": "DependsOn",
      "statement": "DependsOn(NoSQL, protocol)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(axiom, prime)."
    },
    {
      "predicate": "Uses",
      "statement": "Uses(gravity, Newton)."
    },
    {
      "predicate": "HasLocation",
      "statement": "HasLocation(species, system)."
    },
    {
      "predicate": "Set",
      "statement": "Set(Euler, graph, calculus, limit)."
    },
    {
      "predicate": "Causes",
      "statement": "Causes(derivative, function)."
    },
    {
      "predicate": "Semantics",
      "statement": "Semantics(Meaning, reference, sense, context)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(species, tissue, organism)."
    },
    {
      "predicate": "IsA",
      "statement": "IsA(gene, structure)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(GoodsTraded, Glassware)."
    },
    {
      "predicate": "Element",
      "statement": "Element(nitrogen, H2O, oxygen)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(protein, species, virus)."
    },
    {
      "predicate": "IsA",
      "statement": "IsA(bacteria, system)."
    },
    {
      "predicate": "WasDevelopedBy",
      "statement": "WasDevelopedBy(cloud, Curie)."
    },
    {
      "predicate": "Matrix",
      "statement": "Matrix(algebra, topology, prime, Gauss, integer)."
    },
    {
      "predicate": "HasLocation",
      "statement": "HasLocation(derivative, region)."
    },
    {
      "predicate": "Uses",
      "statement": "Uses(algorithm, database)."
    }
  ]
}