{
  "provider": "gpt5",
  "instructions": "Generische Qualitätsprüfung; strikte JSON-Ausgabe",
  "schema": {
    "items_schema": {
      "statement": "string",
      "verdict": "correct|incorrect|uncertain",
      "reasons": "string",
      "suggested_fix": "string|null",
      "domain": "string",
      "confidence": "number"
    },
    "summary_schema": {
      "count": "number",
      "correct": "number",
      "incorrect": "number",
      "uncertain": "number",
      "acceptance_rate": "number"
    }
  },
  "samples": [
    {
      "predicate": "DependsOn",
      "statement": "DependsOn(Newton, neutron)."
    },
    {
      "predicate": "Uses",
      "statement": "Uses(HelpContextualizeCa, EffectsAnd)."
    },
    {
      "predicate": "Interface",
      "statement": "Interface(REST, blockchain, GraphQL, server)."
    },
    {
      "predicate": "DependsOn",
      "statement": "DependsOn(client, cloud)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(mitochondria, species, ribosome)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(KeynesianEconomics, Income)."
    },
    {
      "predicate": "Motion",
      "statement": "Motion(quark, electron, Newton, boson, photon)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(force, mass)."
    },
    {
      "predicate": "API",
      "statement": "API(encryption, HTTP, AI, TCP/IP, GraphQL)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(blockchain, NoSQL, AI)."
    },
    {
      "predicate": "Bond",
      "statement": "Bond(H2O, oxygen, nitrogen, NaCl, O2)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(energy, field, mass)."
    },
    {
      "predicate": "Uses",
      "statement": "Uses(ribosome, DNA)."
    },
    {
      "predicate": "Causes",
      "statement": "Causes(vector, proof)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(FallOfConstantinople, EndOfByzantineEmpire)."
    },
    {
      "predicate": "HasProperty",
      "statement": "HasProperty(database, complex)."
    },
    {
      "predicate": "IsA",
      "statement": "IsA(protocol, element)."
    },
    {
      "predicate": "IsA",
      "statement": "IsA(Entity355, Component)."
    },
    {
      "predicate": "Cell",
      "statement": "Cell(RNA, chromosome, enzyme, nucleus, virus)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(sodium, catalyst, carbon)."
    },
    {
      "predicate": "Requires",
      "statement": "Requires(derivative, theorem)."
    },
    {
      "predicate": "Causes",
      "statement": "Causes(ecosystem, DNA)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(photon, Newton, wave)."
    },
    {
      "predicate": "API",
      "statement": "API(server, AI, GraphQL, cloud, TCP/IP)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(HydrogenBurning, CNOCycle)."
    },
    {
      "predicate": "Causes",
      "statement": "Causes(PlateTectonics, InfluenceGeography)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(sodium, NH3, reaction)."
    },
    {
      "predicate": "Requires",
      "statement": "Requires(RenewableEnergy, EnergyStorage)."
    },
    {
      "predicate": "IsSimilarTo",
      "statement": "IsSimilarTo(photon, quantum)."
    },
    {
      "predicate": "HasProperty",
      "statement": "HasProperty(ion, reactive)."
    },
    {
      "predicate": "Causes",
      "statement": "Causes(sodium, ion)."
    },
    {
      "predicate": "IsDefinedAs",
      "statement": "IsDefinedAs(ecosystem, ribosome)."
    },
    {
      "predicate": "Uses",
      "statement": "Uses(server, database)."
    },
    {
      "predicate": "IsTypeOf",
      "statement": "IsTypeOf(network, framework)."
    },
    {
      "predicate": "Evolution",
      "statement": "Evolution(fungi, animal, chromosome, enzyme, RNA)."
    },
    {
      "predicate": "WasDevelopedBy",
      "statement": "WasDevelopedBy(calculus, Newton)."
    },
    {
      "predicate": "Wave",
      "statement": "Wave(gravity, Newton, photon)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(enzyme, fungi)."
    },
    {
      "predicate": "Force",
      "statement": "Force(electron, Newton, photon)."
    },
    {
      "predicate": "Database",
      "statement": "Database(SQL, HTTP, GraphQL, AI, client)."
    }
  ]
}