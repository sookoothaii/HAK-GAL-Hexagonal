{
  "provider": "gemini_pro",
  "instructions": "Fokus Bio/Physik; strikte JSON-Ausgabe; max 40 Items",
  "schema": {
    "items_schema": {
      "statement": "string",
      "verdict": "correct|incorrect|uncertain",
      "reasons": "string",
      "suggested_fix": "string|null",
      "domain": "string",
      "confidence": "number"
    },
    "summary_schema": {
      "count": "number",
      "correct": "number",
      "incorrect": "number",
      "uncertain": "number",
      "acceptance_rate": "number"
    }
  },
  "samples": [
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(electron, gravity, quark)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(carbon, CH4, sodium)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(integer, vector, integral)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(HTTP, cloud, blockchain)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(chlorine, NaCl, CH4)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(cell, bacteria, DNA)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(HTTP, encryption, AI)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(matrix, calculus, algebra)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(gene, enzyme, cell)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(organ, organism, nucleus)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(calculus, axiom, graph)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(organism, protein, ribosome)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(SQL, database, framework)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(protocol, security, NoSQL)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(gravity, energy, field)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(particle, boson, proton)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(force, photon, quark)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(quark, photon, Einstein)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(neutron, energy, force)."
    },
    {
      "predicate": "ConsistsOf",
      "statement": "ConsistsOf(algebra, equation, graph)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(ModelEvaluation, ValidationTechniques)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(cloud, server)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(SilkRoad, SouthAsia)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(mass, photon)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(HeliumFusion, Helium)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(network, SQL)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(prime, algebra)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(catalyst, reaction)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(axiom, integer)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(Euler, algebra)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(CounterCyclicalPolicies, SurplusesInBooms)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(nitrogen, atom)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(Newton, velocity)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(MachineLearning, LossFunction)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(protocol, cloud)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(theorem, function)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(DNA, gene)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(NotreDame, Spire)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(particle, boson)."
    },
    {
      "predicate": "HasPart",
      "statement": "HasPart(enzyme, gene)."
    }
  ]
}